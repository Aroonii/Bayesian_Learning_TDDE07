deviations = invscaledchi2(xrange,10,T2)
# plot simulated distribution with theoretical distribution
plot(distDeviationPostDraw, main="Simulated distribution of deviation vs theoretical distribution")
lines(xrange, deviations, type="l",col="red")
legend("topright",c("Simulated","Theoretical"), col=c("black","red"), lty=1)
#Use draws from posterior to form GiniCoeffient
Gini_coefficients = 2*pnorm(deviationPostDraw/sqrt(2),0,1)-1
Gini_density = density(Gini_coefficients)
plot(Gini_density, main = "Distribution of Gini Coefficients", xlab = "Gini Coefficient", ylab = "Probability Density")
View(Gini_density)
knitr::include_graphics("2b.PNG")
density?
?density
Density?
d
dgdsg
help("density")
Gini_density
#Use draws from posterior to form GiniCoeffient
Gini_coefficients = 2*pnorm(deviationPostDraw/sqrt(2),0,1)-1
Gini_density = density(Gini_coefficients)
plot(Gini_density, main = "Distribution of Gini Coefficients", xlab = "Gini Coefficient", ylab = "Probability Density")
help(density)
help(quantile)
quantile(Gini_coefficients)
quantile(Gini_coefficients. probs=seq(0,1,0.05))
quantile(Gini_coefficients, probs=seq(0,1,0.05))
Gini_density = density(Gini_coefficients)
Gini_density
GiniQuantiles = quantile(Gini_coefficients, probs=seq(0,1,0.05))
range = c(GiniQuantiles[1],GiniQuantiles[20])
range = c(GiniQuantiles[2],GiniQuantiles[20])
install.packages("HDInterval")
# using library from CRAN to get highest (posterior) density interval
library(HDinterval)
# using library from CRAN to get highest (posterior) density interval
library(HDInterval)
hdi(Gini_density)
hdi(Gini_density, credMass=0.9)
Crediblerange = c(GiniQuantiles[2],GiniQuantiles[20])
hdiRange = hdi(Gini_density, credMass=0.9)
hist(Gini_coefficients)
plot(Gini_density)
GiniQuantiles = quantile(Gini_coefficients, probs=seq(0,1,0.05))
Crediblerange = c(GiniQuantiles[2],GiniQuantiles[20])
# gets range (0.046,0.21)
#Also, do a kernel density estimate of the posterior of G using the density function in R with
#default settings, and use that kernel density estimate to compute a 90% Highest
#Posterior Density interval for G. Compare the two intervals
# using library from CRAN to get highest (posterior) density interval
library(HDInterval)
hdiRange = hdi(Gini_density, credMass=0.9)
# gets range (0.033,0.176)
GiniQuantiles = quantile(Gini_coefficients, probs=seq(0,1,0.05))
Crediblerange = c(GiniQuantiles[2],GiniQuantiles[20])
# gets range (0.046,0.21)
#Also, do a kernel density estimate of the posterior of G using the density function in R with
#default settings, and use that kernel density estimate to compute a 90% Highest
#Posterior Density interval for G. Compare the two intervals
# using library from CRAN to get highest (posterior) density interval
library(HDInterval)
hdiRange = hdi(Gini_density, credMass=0.9)
# gets range (0.033,0.176)
knitr::include_graphics("2b.PNG")
Gini_coefficients = 2*pnorm(deviationPostDraw/sqrt(2),0,1)-1
Gini_density = density(Gini_coefficients)
plot(Gini_density, main = "Distribution of Gini Coefficients", xlab = "Gini Coefficient", ylab = "Probability Density")
?bessle
bessel?
ffsd
?bessel
y = c(-2.44, 2.14, 2.54, 1.83, 2.02, 2.33, -2.79, 2.23, 2.07, 2.02)
k_prior = function(lambda, k){
lambda*exp(-lambda*k)
}
y = c(-2.44, 2.14, 2.54, 1.83, 2.02, 2.33, -2.79, 2.23, 2.07, 2.02)
my = 2.39
y_distribution = function(k, y, my){
exp(k*cos(y-my))/2*pi*besselJ(k, 0)
}
y_distribution = function(k, y, my){
exp(k*cos(y-my))/2*pi*besselI(k, 0)
}
?pi
sequence = sequence(0.1, 5, 0.5)
sequence = sequence(0.1:5, 0.5)
sequence = sequence(0.1, 5, 0.1)
sequence = sec(0.1, 5, 0.1)
sequence = seq(0.1, 5, 0.1)
lambda = 1
k_prior_vector = k_prior(lambda, sequence)
y_dist= y_distribution(k_prior_vector, y, my)
y_dist
k_prior_vector = k_prior(lambda, sequence)
posterior = k_prior_vector*y_dist
y_distribution = function(k, y, my){
prod(exp(k*cos(y-my))/2*pi*besselI(k, 0))
}
y_dist= y_distribution(k_prior_vector, y, my)
posterior = k_prior_vector*y_dist
k_prior_vector = k_prior(lambda, sequence)
y_likelihodd = sapply(k_prior_vecor, y_distribution)
y_likelihodd = sapply(k_prior_vector, y_distribution)
k_prior_vector = k_prior(lambda, sequence)
y_likelihodd = sapply(k_prior_vector, y_distribution)
k_prior = function(lambda, k){
return(lambda*exp(-lambda*k))
}
k_prior = function(lambda, k){
lambda*exp(-lambda*k)
}
y_likelihodd = sapply(k_prior_vector, y_distribution)
y_likelihodd = sapply(k_prior_vector, y_distribution(k_prior_vector, y, my))
y_likelihodd = sapply(k_prior_vector, y_distribution(y, my))
# our x-values that we want to predict number of bids for
x_values <- c(1,1,1,1,0,0,0,1,0.5)
# mean of our beta values from the posterior
mean_betas = c()
# dont count in the first 1000 iterations in mean calculation (burn-in phase)
for(i in 1:9){
mean_betas = append(mean_betas, mean(testDraws[1000:10000,i]))
}
knitr::include_graphics("1a.PNG")
data = read.table("rainfall.dat")
setwd("X:/Documents/TDDE07/lab4")
library(rstan)
t = seq(1,200, 1)
my = 10
sigma_square = 2
phi = 0.5
time_points = c()
set.seed(12345)
for (i in 1:length(t)){
if(i == 1){
time_points[i] = my
next
}
error_term = rnorm(1, mean = 0, sd = sqrt(sigma_square))
time_points[i] = my + phi*(time_points[i-1] - my) + error_term
}
plot(t, time_points, main = "phi = 0.5", ylab = "Xt")
#1b)
time_serie = function(phi){
array = c()
for (i in 1:length(t)){
if(i == 1){
array[i] = my
next
}
error_term = rnorm(1, mean = 0, sd = sqrt(sigma_square))
array[i] = my + phi*(array[i-1] - my) + error_term
}
return(array)
}
time_serie_0.95 = time_serie(0.95)
time_serie_0.3 = time_serie(0.01)
# aplha = my
# beta = phi
# sigma = sigma
alpha = 1
beta = 0.5
sigma = 2
stanModel = ' data {
int<lower=0> N;
vector[N] y;
}
parameters {
real alpha;
real beta;
real<lower=0> sigma;
}
model {
for (n in 2:N)
y[n] ~ normal(alpha + beta * y[n-1], sigma);
}'
burnin = 1000
niter = 3000
# for phi = 0.95
data = list(N=length(t), y=time_serie_0.95)
fit_0.95 = stan(model_code=stanModel,data=data,
warmup=burnin,iter=niter,chains=4)
# Print the fitted model
print(fit_0.95,digits_summary=3)
# for phi = 0.3
data = list(N=length(t), y=time_serie_0.3)
fit_0.3 = stan(model_code=stanModel,data=data,
warmup=burnin,iter=niter,chains=4)
# Print the fitted model
print(fit_0.3,digits_summary=3)
# Extract posterior samples
postDraws_0.95 <- extract(fit_0.95)
postDraws_0.3 <- extract(fit_0.3)
par(mfrow = c(1,1))
plot(postDraws_0.95$beta,type="l",ylab="Phi", main="Sample convergence for phi when phi = 0.95")
plot(postDraws_0.3$beta,type="l",ylab="Phi", main="Sample convergence for phi when phi = 0.3")
plot(postDraws_0.95$alpha,type="l",ylab="My", main="Sample convergence for my when phi = 0.95")
plot(postDraws_0.3$alpha,type="l",ylab="My", main="Sample convergence for my when phi = 0.3")
plot(postDraws_0.95$alpha, postDraws_0.95$beta,type="l",ylab="Phi",xlab = "My", main="Joint posterior for phi = 0.95")
plot(postDraws_0.3$alpha, postDraws_0.3$beta,type="l",ylab="Phi",xlab = "My", main="Joint posterior for phi = 0.3")
# Assignment 3
c_data = read.table('campy.dat', header = TRUE)
C_DataRStan<-
list(N = nrow(c_data),
c = c_data$c)
# The poissons model
C_Model = '
data {
int<lower=0> N;
int c[N];
}
parameters {
real alpha;
real <lower=-1, upper= 1> beta;
real<lower=0> sigma;
real Xt[N];
}
model {
// Prior
for (n in 2:N){
Xt[n] ~ normal(alpha + beta * Xt[n-1], sigma);
}
// Model/likelihood
for(n in 1:N){
c[n] ~ poisson(exp(Xt[n]));
}
}'
fit_C_Model<-stan(model_code=C_Model,
data=C_DataRStan,
warmup=1000,
iter=2000,
chains=4)
print(fit_C_Model,digits=4)
# Plot some results
res<-extract(fit_C_Model)
poster_means_vector = fit_C_Model@.MISC[["summary"]][["msd"]][-c(1,2,3)]
cred_lower = fit_C_Model@.MISC[["summary"]][["c_quan"]][,1,1][-c(1,2,3,144)]
cred_upper = fit_C_Model@.MISC[["summary"]][["c_quan"]][,9,1][-c(1,2,3,144)]
N = nrow(c_data)
xGrid = seq(1,140,1)
plot(xGrid, c_data$c, col = "red", main = "Possion model & Data", ylab = "nr of Cases", xlab = "Draw")
lines(exp(poster_means_vector[1:N]), ylim = c(0,60), col = "black", type = 'l')
lines(exp(cred_lower), col = "blue")
lines(exp(cred_upper), col = "green")
legend('topleft',legend = c('Data', 'Mean','Lower','Upper'), col = c('red', 'black', 'blue', 'green'), lwd=2)
##2d)
# The poissons model
C_Model = '
data {
int<lower=0> N;
int c[N];
}
parameters {
real alpha;
real <lower=-1, upper= 1> beta;
real<lower=0> sigma;
real Xt[N];
}
model {
// Prior for sigma
sigma~gamma()
// Prior
for (n in 2:N){
Xt[n] ~ normal(alpha + beta * Xt[n-1], sigma);
}
// Model/likelihood
for(n in 1:N){
c[n] ~ poisson(exp(Xt[n]));
}
}'
fit_C_Model<-stan(model_code=C_Model,
data=C_DataRStan,
warmup=1000,
iter=2000,
chains=4)
print(fit_C_Model,digits=4)
# Plot some results
res<-extract(fit_C_Model)
install.packages("rstan")
library(rstan)
t = seq(1,200, 1)
my = 10
sigma_square = 2
phi = 0.5
time_points = c()
set.seed(12345)
for (i in 1:length(t)){
if(i == 1){
time_points[i] = my
next
}
error_term = rnorm(1, mean = 0, sd = sqrt(sigma_square))
time_points[i] = my + phi*(time_points[i-1] - my) + error_term
}
plot(t, time_points, main = "phi = 0.5", ylab = "Xt")
#1b)
time_serie = function(phi){
array = c()
for (i in 1:length(t)){
if(i == 1){
array[i] = my
next
}
error_term = rnorm(1, mean = 0, sd = sqrt(sigma_square))
array[i] = my + phi*(array[i-1] - my) + error_term
}
return(array)
}
time_serie_0.95 = time_serie(0.95)
time_serie_0.3 = time_serie(0.01)
# aplha = my
# beta = phi
# sigma = sigma
alpha = 1
beta = 0.5
sigma = 2
stanModel = ' data {
int<lower=0> N;
vector[N] y;
}
parameters {
real alpha;
real beta;
real<lower=0> sigma;
}
model {
for (n in 2:N)
y[n] ~ normal(alpha + beta * y[n-1], sigma);
}'
burnin = 1000
niter = 3000
# for phi = 0.95
data = list(N=length(t), y=time_serie_0.95)
fit_0.95 = stan(model_code=stanModel,data=data,
warmup=burnin,iter=niter,chains=4)
# Print the fitted model
print(fit_0.95,digits_summary=3)
# for phi = 0.3
data = list(N=length(t), y=time_serie_0.3)
fit_0.3 = stan(model_code=stanModel,data=data,
warmup=burnin,iter=niter,chains=4)
# Print the fitted model
print(fit_0.3,digits_summary=3)
# Extract posterior samples
postDraws_0.95 <- extract(fit_0.95)
postDraws_0.3 <- extract(fit_0.3)
par(mfrow = c(1,1))
plot(postDraws_0.95$beta,type="l",ylab="Phi", main="Sample convergence for phi when phi = 0.95")
plot(postDraws_0.3$beta,type="l",ylab="Phi", main="Sample convergence for phi when phi = 0.3")
plot(postDraws_0.95$alpha,type="l",ylab="My", main="Sample convergence for my when phi = 0.95")
plot(postDraws_0.3$alpha,type="l",ylab="My", main="Sample convergence for my when phi = 0.3")
plot(postDraws_0.95$alpha, postDraws_0.95$beta,type="l",ylab="Phi",xlab = "My", main="Joint posterior for phi = 0.95")
plot(postDraws_0.3$alpha, postDraws_0.3$beta,type="l",ylab="Phi",xlab = "My", main="Joint posterior for phi = 0.3")
# Assignment 3
c_data = read.table('campy.dat', header = TRUE)
C_DataRStan<-
list(N = nrow(c_data),
c = c_data$c)
# The poissons model
C_Model = '
data {
int<lower=0> N;
int c[N];
}
parameters {
real alpha;
real <lower=-1, upper= 1> beta;
real<lower=0> sigma;
real Xt[N];
}
model {
// Prior
for (n in 2:N){
Xt[n] ~ normal(alpha + beta * Xt[n-1], sigma);
}
// Model/likelihood
for(n in 1:N){
c[n] ~ poisson(exp(Xt[n]));
}
}'
fit_C_Model<-stan(model_code=C_Model,
data=C_DataRStan,
warmup=1000,
iter=2000,
chains=4)
print(fit_C_Model,digits=4)
# Plot some results
res<-extract(fit_C_Model)
poster_means_vector = fit_C_Model@.MISC[["summary"]][["msd"]][-c(1,2,3)]
cred_lower = fit_C_Model@.MISC[["summary"]][["c_quan"]][,1,1][-c(1,2,3,144)]
cred_upper = fit_C_Model@.MISC[["summary"]][["c_quan"]][,9,1][-c(1,2,3,144)]
N = nrow(c_data)
xGrid = seq(1,140,1)
plot(xGrid, c_data$c, col = "red", main = "Possion model & Data", ylab = "nr of Cases", xlab = "Draw")
lines(exp(poster_means_vector[1:N]), ylim = c(0,60), col = "black", type = 'l')
lines(exp(cred_lower), col = "blue")
lines(exp(cred_upper), col = "green")
legend('topleft',legend = c('Data', 'Mean','Lower','Upper'), col = c('red', 'black', 'blue', 'green'), lwd=2)
##2d)
# The poissons model
C_Model = '
data {
int<lower=0> N;
int c[N];
}
parameters {
real alpha;
real <lower=-1, upper= 1> beta;
real<lower=0> sigma;
real Xt[N];
}
model {
// Prior for sigma
sigma~gamma()
// Prior
for (n in 2:N){
Xt[n] ~ normal(alpha + beta * Xt[n-1], sigma);
}
// Model/likelihood
for(n in 1:N){
c[n] ~ poisson(exp(Xt[n]));
}
}'
fit_C_Model<-stan(model_code=C_Model,
data=C_DataRStan,
warmup=1000,
iter=2000,
chains=4)
print(fit_C_Model,digits=4)
# Plot some results
res<-extract(fit_C_Model)
# The poissons model
C_Model = '
data {
int<lower=0> N;
int c[N];
}
parameters {
real alpha;
real <lower=-1, upper= 1> beta;
real<lower=0> sigma;
real Xt[N];
}
model {
// Prior for sigma
sigma~inv_gamma(1,1)
// Prior
for (n in 2:N){
Xt[n] ~ normal(alpha + beta * Xt[n-1], sigma);
}
// Model/likelihood
for(n in 1:N){
c[n] ~ poisson(exp(Xt[n]));
}
}'
fit_C_Model<-stan(model_code=C_Model,
data=C_DataRStan,
warmup=1000,
iter=2000,
chains=4)
print(fit_C_Model,digits=4)
# Plot some results
res<-extract(fit_C_Model)
poster_means_vector = fit_C_Model@.MISC[["summary"]][["msd"]][-c(1,2,3)]
cred_lower = fit_C_Model@.MISC[["summary"]][["c_quan"]][,1,1][-c(1,2,3,144)]
cred_upper = fit_C_Model@.MISC[["summary"]][["c_quan"]][,9,1][-c(1,2,3,144)]
N = nrow(c_data)
plot(xGrid, c_data$c, col = "red", main = "Possion model & Data", ylab = "nr of Cases", xlab = "Draw")
lines(exp(poster_means_vector[1:N]), ylim = c(0,60), col = "black", type = 'l')
lines(exp(cred_lower), col = "blue")
lines(exp(cred_upper), col = "green")
cred_lower = fit_C_Model@.MISC[["summary"]][["c_quan"]][,1,1][-c(1,2,3,144)]
cred_upper = fit_C_Model@.MISC[["summary"]][["c_quan"]][,9,1][-c(1,2,3,144)]
poster_means_vector = fit_C_Model@.MISC[["summary"]][["msd"]][-c(1,2,3)]
# Plot some results
res<-extract(fit_C_Model)
fit_C_Model<-stan(model_code=C_Model,
data=C_DataRStan,
warmup=1000,
iter=2000,
chains=4)
c_data = read.table('campy.dat', header = TRUE)
C_DataRStan<-
list(N = nrow(c_data),
c = c_data$c)
# The poissons model
C_Model = '
data {
int<lower=0> N;
int c[N];
}
parameters {
real alpha;
real <lower=-1, upper= 1> beta;
real<lower=0> sigma;
real Xt[N];
}
model {
// Prior
for (n in 2:N){
Xt[n] ~ normal(alpha + beta * Xt[n-1], sigma);
}
// Model/likelihood
for(n in 1:N){
c[n] ~ poisson(exp(Xt[n]));
}
}'
fit_C_Model<-stan(model_code=C_Model,
data=C_DataRStan,
warmup=1000,
iter=2000,
chains=4)
print(fit_C_Model,digits=4)
