rice = rRice(1,theta_draw,1)
outcome = append(outcome, rice)
}
sigma_square = sqrt(hessian_posterior[1,1])
# take inverse for using it in the formula
hessian_posterior = (solve(hessian_posterior))
sigma = sqrt(hessian_posterior[1,1])
approximate_density_distribution = dnorm(thetaGrid, mean = my_posterior, sd = sigma)
plot(posterior_normalized)
lines(approximate_density_distribution, col = "red", type ="b")
#Draw from the posterior distribution and use these draws to plug in and make draw from test data
outcome =c()
set.seed(12345)
for (i in 1:1000){
#nake draw from posterior distr.
theta_draw = rnorm(n = 1, mean = my_posterior, sd = sigma)
#plug in draw and make fraw from predictions distr.
rice = rRice(1,theta_draw,1)
outcome = append(outcome, rice)
}
# histogram representing prob of woman work
#Will be normal since sum  of two random normal is normal
hist(outcome, main="Predictive distribution x_tilde", xlab="rice", ylab="Acumulation of rice out of 1000 draws")
# eBay bids data
load(file = 'bids.RData')    # Loading the vector 'bids' into workspace
bids = bids
bidsCounts <- table(bids)  # data2Counts is a frequency table of counts.
xGrid <- seq(min(bids),max(bids))  # A grid used as input to GibbsMixPois.R over which the mixture density is evaluated.
n = auctions = length(bids)
alpha = 1
beta = 1
amount_bids = sum(bids)
alpha_posterior = amount_bids + alpha
beta_posterior = n + beta
gamma_grid = seq(2,4, length = 1000)
plot(gamma_grid, dgamma(gamma_sequence, alpha_posterior, beta_posterior), xlab = "Theta")
gamma_grid = seq(2,4, length = 1000)
plot(gamma_grid, dgamma(gamma_grid, alpha_posterior, beta_posterior), xlab = "Theta")
plot(dgamma(gamma_grid, alpha_posterior, beta_posterior), xlab = "Theta")
gamma_grid = seq(2,4, length = 1000)
plot(dgamma(gamma_grid, alpha_posterior, beta_posterior), xlab = "Theta")
plot(posterior_normalized)
lines(approximate_density_distribution, col = "red", type ="b")
library(Bessel)
#compute log posterior
# Since we don't have any information about the prior we assuem it to be constant. Ex 1 => log(constant) = constant
# when normalazing this all vlues will be affected equally hence it does not make any difference
log.post = function(theta, x, v){
log_like = sum(log(x/v)*(-(x^2+theta^2)) + log(besselI(x*theta/v, 0))) + 2
return(log_like)
}
riceData <- c(1.556, 1.861, 3.135, 1.311, 1.877, 0.622, 3.219, 0.768, 2.358, 2.056)
sequence = seq(0.1, 5, 0.1)
theta = 1
v = 1
prior = 1
# Plot the posterior over a grid of theta values. Gives us the probability depending on different theta values
gridWidth <- 0.01
thetaGrid <- seq(0.01, 3, by = gridWidth)
logRicePostGrid <- rep(0,length(thetaGrid))
count <- 0
for (theta in thetaGrid){
count <- count + 1
logRicePostGrid[count] <-log.post(theta, riceData, v)
}
posterior = exp(logRicePostGrid)
posterior_normalized = (1/gridWidth)*posterior/(sum(posterior))
plot(posterior_normalized)
#b) Normal approximation of the posterior distr. of theta
# Different starting values. Ideally, any random starting value gives you the same optimum (i.e. optimum is unique)
initVal <- c(1);
# function which optmizes over expression log.posterior with respect to its first argument (betas).
# returns optimal values for beta (mode), and hessian in the mode
OptParams<-optim(initVal,log.post,gr=NULL,riceData, v ,method=c("L-BFGS-B"),lower = 0, control=list(fnscale=-1),hessian=TRUE)
my_posterior = OptParams$par
# takes negative so that the posterior can be approx. as normal
# J = -second derivate evaluated in theta_hat
hessian_posterior = -OptParams$hessian
# take inverse for using it in the formula
hessian_posterior = (solve(hessian_posterior))
sigma = sqrt(hessian_posterior[1,1])
#Draw samples from Betas posterior distribution.
set.seed(12345)
#We now have a posterior distributin which is ~N(my_posterior, sigma_square). We want to do the same thing as before
# plot the pdf over a grid of values => Since we have it in a good form we can do it immedeatly and directly get
# the normalized values
approximate_density_distribution = dnorm(thetaGrid, mean = my_posterior, sd = sigma)
plot(posterior_normalized)
lines(approximate_density_distribution, col = "red", type ="b")
#C)
#1. Explain on paper how the predictive distribution for a new observation is ocmputed by integration. Only
#The general dormula
#2. Compute the predictive distribution for a new observation by simulation. USe the approximate posterior from b
# simulator for r_rice is given by exam file
rRice <-function(n = 1, theta = 1, psi = 1){
x <- rnorm(n = n, mean = 0, sd = sqrt(psi))
y <- rnorm(n = n, mean = theta, sd = sqrt(psi))
return(sqrt(x^2+y^2))
}
#Draw from the posterior distribution and use these draws to plug in and make draw from test data
outcome =c()
set.seed(12345)
for (i in 1:1000){
#nake draw from posterior distr.
theta_draw = rnorm(n = 1, mean = my_posterior, sd = sigma)
#plug in draw and make fraw from predictions distr.
rice = rRice(1,theta_draw,1)
outcome = append(outcome, rice)
}
#Histrogram of the predictive
hist(outcome, main="Predictive distribution x_tilde", xlab="rice", ylab="Acumulation of rice out of 1000 draws")
#Assignemnt 2
# eBay bids data
load(file = 'bids.RData')    # Loading the vector 'bids' into workspace
bids = bids
bidsCounts <- table(bids)  # data2Counts is a frequency table of counts.
xGrid <- seq(min(bids),max(bids))  # A grid used as input to GibbsMixPois.R over which the mixture density is evaluated.
n = auctions = length(bids)
alpha = 1
beta = 1
amount_bids = sum(bids)
alpha_posterior = amount_bids + alpha
beta_posterior = n + beta
gamma_grid = seq(2,4, length = 1000)
plot(gamma_grid, dgamma(gamma_sequence, alpha_posterior, beta_posterior), xlab = "Theta")
#Does the poisson model describe the distribution of the data well ?
#=> Compare draws from the possion distribution with the real data
data_density = density(bids)
plot(data_density)
xGrid = seq(min(bids),max(bids))
data_D = bidsCounts/sum(bidsCounts)
plot(xGrid, data_D)
approximate_density_distribution = dnorm(thetaGrid, mean = my_posterior, sd = sigma)
plot(posterior_normalized)
lines(approximate_density_distribution, col = "red", type ="b")
plot(thetaGrid,aposterior_normalized)
plot(thetaGrid,posterior_normalized)
plot(posterior_normalized)
plot(thetaGrid,posterior_normalized)
lines(approximate_density_distribution, col = "red", type ="b")
plot(posterior_normalized)
lines(approximate_density_distribution, col = "red", type ="b")
plot(thetaGrid, posterior_normalized)
lines(thetaGrid, approximate_density_distribution, col = "red", type ="b")
plot(posterior_normalized)
plot(gamma_grid, dgamma(gamma_grid, alpha_posterior, beta_posterior), xlab = "Theta")
gamma_grid = seq(3,4, length = 1000)
plot(gamma_grid, dgamma(gamma_grid, alpha_posterior, beta_posterior), xlab = "Theta")
gamma_grid = seq(3.4,4, length = 1000)
plot(gamma_grid, dgamma(gamma_grid, alpha_posterior, beta_posterior), xlab = "Theta")
gamma_grid = seq(3.4,3.8, length = 1000)
plot(gamma_grid, dgamma(gamma_grid, alpha_posterior, beta_posterior), xlab = "Theta")
gamma_grid = seq(3.4,4.1, length = 1000)
plot(gamma_grid, dgamma(gamma_grid, alpha_posterior, beta_posterior), xlab = "Theta")
gamma_grid = seq(3.4,3.9, length = 1000)
plot(gamma_grid, dgamma(gamma_grid, alpha_posterior, beta_posterior), xlab = "Theta")
plot(gamma_grid, dgamma(gamma_grid, alpha_posterior, beta_posterior), xlab = "Theta", ylab = "Density")
bids
View(bids)
#b
#Does the poisson model describe the distribution of the data well ?
#=> Model evaluation => Make draws from the posterior of theta. Use these to plug in
# to the distribution of the data (in this casepossion) and make new replica draws
data_density = density(bids)
plot(data_density)
plot(xGrid, data_density)
#b
#Does the poisson model describe the distribution of the data well ?
#=> Model evaluation => Make draws from the posterior of theta. Use these to plug in
# to the distribution of the data (in this casepossion) and make new replica draws
data_density = density(bids)
xGrid
data_D = bidsCounts/sum(bidsCounts)
plot(xGrid, data_D)
#Manually create the density of the data
#Nomalize
data_D = bidsCounts/sum(bidsCounts)
plot(data_D)
#Manually create the density of the data
#Normalize
data_dens = bidsCounts/sum(bidsCounts)
plot(xGrid, data_dens)
plot(xGrid, data_dens, type = 'l')
#Manually create the density of the data
#Normalize
data_dens = bidsCounts/sum(bidsCounts)
plot(xGrid, data_dens, type = 'l')
plot(xGrid, data_dens, type = 'l')
#b
#Does the poisson model describe the distribution of the data well ?
#=> Model evaluation => Make draws from the posterior of theta. Use these to plug in
# to the distribution of the data (in this casepossion) and make new replica draws
data_density = density(bids)
plot(data_density)
#b
#Does the poisson model describe the distribution of the data well ?
#=> Model evaluation => Make draws from the posterior of theta. Use these to plug in
# to the distribution of the data (in this casepossion) and make new replica draws
data_density = density(bids)
plot(data_density)
lines(xGrid, data_dens, type = 'l')
theta_draw = rnorm(1, alpha_posterior, beta_posterior)
theta_draw
theta_draw = rnorm(2, alpha_posterior, beta_posterior)
theta_draw = rnorm(2, alpha_posterior, beta_posterior)
theta_draw
theta_draw = rnorm(2, alpha_posterior, beta_posterior)
#use theta draw to make an x_draw from the poisson distribution
x_replica = rpois(2, theta_draw)
x_replica
theta_draw
theta_draw = rnorm(1, alpha_posterior, beta_posterior)
#use theta draw to make an x_draw from the poisson distribution
x_replica = rpois(2, theta_draw)
x_replica
set.seed(12345)
theta_draw = rnorm(1, alpha_posterior, beta_posterior)
set.seed(12345)
#use theta draw to make an x_draw from the poisson distribution
x_replica = rpois(2, theta_draw)
set.seed(12345)
theta_draw = rnorm(1, alpha_posterior, beta_posterior)
theta_draw
set.seed(12345)
#use theta draw to make an x_draw from the poisson distribution
x_replica = rpois(2, theta_draw)
x_replica
set.seed(12345)
theta_draw = rnorm(2, alpha_posterior, beta_posterior)
theta_draw
set.seed(12345)
#use theta draw to make an x_draw from the poisson distribution
x_replica = rpois(2, theta_draw)
x_replica
set.seed(12345)
theta_draw = rnorm(1, alpha_posterior, beta_posterior)
theta_draw
set.seed(12345)
#use theta draw to make an x_draw from the poisson distribution
x_replica = rpois(2, theta_draw)
x_replica
set.seed(12345)
theta_draw = rnorm(2, alpha_posterior, beta_posterior)
theta_draw
set.seed(12345)
#use theta draw to make an x_draw from the poisson distribution
x_replica = rpois(2, theta_draw)
x_replica
set.seed(12345)
theta_draw = rnorm(3, alpha_posterior, beta_posterior)
theta_draw
set.seed(12345)
#use theta draw to make an x_draw from the poisson distribution
x_replica = rpois(2, theta_draw)
x_replica
set.seed(12345)
theta_draw = rnorm(3, alpha_posterior, beta_posterior)
theta_draw
set.seed(12345)
#use theta draw to make an x_draw from the poisson distribution
x_replica = rpois(3, theta_draw)
x_replica
set.seed(12345)
theta_draw = rnorm(2, alpha_posterior, beta_posterior)
theta_draw
set.seed(12345)
#use theta draw to make an x_draw from the poisson distribution
x_replica = rpois(3, theta_draw)
x_replica
set.seed(12345)
theta_draw = rnorm(1000, alpha_posterior, beta_posterior)
theta_draw
set.seed(12345)
#use theta draw to make an x_draw from the poisson distribution
x_replica = rpois(1000, theta_draw)
x_replica
plot(x_replica)
plot(x_replica/sum(x_replica))
plot(x_replica/sum(x_replica))
x_replica
#use theta draw to make an x_draw from the poisson distribution
x_replica = dpois(1000, theta_draw)
plot(x_replica)
#use theta draw to make an x_draw from the poisson distribution
#Varör inte köra dpois direkt ?
x_replica = drpois(1000, theta_draw)
#use theta draw to make an x_draw from the poisson distribution
#Varör inte köra dpois direkt ?
x_replica = rpois(1000, theta_draw)
x_replica_norm = x_replica/sum(x_replica)
plot(x_replica)
x_replica_norm
theta_draw = rnorm(1, alpha_posterior, beta_posterior)
#use theta draw to make an x_draw from the poisson distribution
#Varör inte köra dpois direkt ?
x_replica = rpois(1, theta_draw)
x_poission = c()
set.seed(12345)
x_poission = c()
for(i in 1:n){
theta_draw = rnorm(1, alpha_posterior, beta_posterior)
#use theta draw to make an x_draw from the poisson distribution
#Varör inte köra dpois direkt ?
x_replica = rpois(1, theta_draw)
x_poission[i] = x_replica
}
x_poission
x_replica_norm = x_replica/sum(x_replica)
theta_draw = rnorm(1000, alpha_posterior, beta_posterior)
x_replica = rpois(1000, theta_draw)
set.seed(12345)
theta_draw = rnorm(1000, alpha_posterior, beta_posterior)
x_replica = rpois(1000, theta_draw)
x_replica_norm = x_replica/sum(x_replica)
plot(x_replica_norm)
sum(x_poission)
x_replica_norm = x_poission/sum(x_poission)
plot(x_replica_norm)
d = density(x_poission)
plot(d)
plot(x_replica_norm)
plot(xGrid, x_replica_norm)
plot(data_density)
lines(d)
plot(d)
n
for(i in 1:n){
theta_draw = rnorm(1, alpha_posterior, beta_posterior)
#use theta draw to make an x_draw from the poisson distribution
#Varör inte köra dpois direkt ?
x_replica = r
dpois(1, theta_draw)
x_poission[i] = x_replica
}
for(i in 1:n){
theta_draw = rnorm(1, alpha_posterior, beta_posterior)
#use theta draw to make an x_draw from the poisson distribution
#Varör inte köra dpois direkt ?
x_replica = dpois(1, theta_draw)
x_poission[i] = x_replica
}
plot(x_poission)
plot(xGrid, x_poission)
for(i in 1:n){
theta_draw = rnorm(1, alpha_posterior, beta_posterior)
#use theta draw to make an x_draw from the poisson distribution
#Varör inte köra dpois direkt ?
x_replica = rpois(1, theta_draw)
x_poission[i] = x_replica
}
theta_draw = rnorm(1000, alpha_posterior, beta_posterior)
#use theta draw to make an x_draw from the poisson distribution
#Varör inte köra dpois direkt ?
x_replica = rpois(xGrid, theta_draw[1])
plot(x_replica)
x_replica = rpois(xGrid, theta_draw[1])
plot(x_replica)
x_poission[i] = x_replica
x_replica = rpois(xGrid, theta_draw[1])
plot(x_replica)
x_poission[i] = x_replica
x_replica = rpois(xGrid, theta_draw[1])
plot(x_replica)
x_poission[i] = x_replica
x_replica = rpois(xGrid, theta_draw[1])
plot(x_replica)
x_poission[i] = x_replica
x_replica = rpois(xGrid, theta_draw[1])
plot(x_replica)
x_poission[i] = x_replica
x_replica = rpois(xGrid, theta_draw[1])
plot(x_replica)
x_poission[i] = x_replica
x_replica = rpois(xGrid, theta_draw[1])
plot(x_replica)
x_poission[i] = x_replica
x_replica
mean(x_replica)
set.seed(12345)
x_poission = c()
theta_draw = rnorm(1000, alpha_posterior, beta_posterior)
#For each draw theta we want to compute the possion distribution (distribution for
# x values)
for (i in 1:n){
#use theta draw to make an x_draw from the poisson distribution
#Varör inte köra dpois direkt ?
x_replica = rpois(xGrid, theta_draw[1])
#Compute T function for example checking mean
mean_x_replica = mean(x_replica)
x_poission = append(x_poission, mean_x_replica)
}
mean(bids)
bids
for (i in 1:n){
#use theta draw to make an x_draw from the poisson distribution
#Varör inte köra dpois direkt ?
x_replica = rpois(xGrid, theta_draw[i])
#Compute T function for example checking mean
mean_x_replica = mean(x_replica)
x_poission = append(x_poission, mean_x_replica)
}
x_replica
n
theta_draw[1]
theta_draw = rgamma(1000, alpha_posterior, beta_posterior)
theta_draw
set.seed(12345)
x_poission = c()
theta_draw = rgamma(1000, alpha_posterior, beta_posterior)
#For each draw theta we want to compute the possion distribution (distribution for
# x values)
for (i in 1:n){
#use theta draw to make an x_draw from the poisson distribution
#Varör inte köra dpois direkt ?
x_replica = rpois(xGrid, theta_draw[i])
#Compute T function for example checking mean
mean_x_replica = mean(x_replica)
x_poission = append(x_poission, mean_x_replica)
}
x_replica
x_poission
plot(x_poission)
hist(x_poission)
set.seed(12345)
x_poission = c()
theta_draw = rgamma(1000, alpha_posterior, beta_posterior)
#For each draw theta we want to compute the possion distribution (distribution for
# x values)
for (i in 1:n){
#use theta draw to make an x_draw from the poisson distribution
#Varör inte köra dpois direkt ?
x_replica = dpois(xGrid, theta_draw[i])
#Compute T function for example checking mean
mean_x_replica = mean(x_replica)
x_poission = append(x_poission, mean_x_replica)
}
x_replica
density_mean = density_mean + dpois(xGrid, theta_draw[i])
density_mean = 0
density_mean = density_mean + dpois(xGrid, theta_draw[i])
density_mean = rep(0,12)
density_mean
for (i in 1:n){
#use theta draw to make an x_draw from the poisson distribution
#Varör inte köra dpois direkt ?
density_mean = density_mean + dpois(xGrid, theta_draw[i])
#Compute T function for example checking mean
}
density_mean = density_mean + dpois(xGrid, theta_draw[i])
density_mean
density_mean = density_mean/n
density_mean
plot(xGrid, data_dens, type = 'l')
lines(density_mean)
xGrid = seq(min(bids),max(bids))  # A grid used as input to GibbsMixPois.R over which the mixture density is evaluated.
dataDistr = bidsCounts/sum(bidsCounts)
plot(xGrid, dataDistr, type = "o", lwd = 3, col = "black", pch = 'o', cex = 0.6,
ylim = c(0,0.22), main = "Fitted models")
lines(xGrid, data_dens, type = 'l')
plot(xGrid, data_dens, type = 'l')
lines(xGrid, dataDistr, type = "o", lwd = 3, col = "black", pch = 'o', cex = 0.6,
ylim = c(0,0.22), main = "Fitted models")
plot(xGrid, data_dens, type = 'l')
plot(xGrid, dataDistr, type = "o", lwd = 3, col = "black", pch = 'o', cex = 0.6,
ylim = c(0,0.22), main = "Fitted models")
nDraws = 1000
thetaDraws = rgamma(n = nDraws, shape = alphaGamma + sum(bids), rate = betaGamma + n)
thetaDraws = rgamma(n = nDraws, shape = alpha_posterior, rate = beta_posterior)
PoisDensMean <- rep(0, length(xGrid))
for (i in 1:nDraws){
PoisDensMean = PoisDensMean + dpois(xGrid, lambda = thetaDraws[i])
}
PoisDensMean = PoisDensMean/nDraws # Average
lines(xGrid, PoisDensMean, type = "o", lwd = 1, col = "blue", pch = 'o', cex = 0.6)
legend(x = 6 , y = 0.2, legend = c("Data","Poisson (mean theta)",
"Poisson (mean density)"), col = c("black","red","blue"),
lty = c(1,1,1), lwd = c(3,3,1), cex = 0.8)
plot(xGrid, data_dens, type = 'l')
lines(density_mean)
#b
#Does the poisson model describe the distribution of the data well ?
#=> Model evaluation => Make draws from the posterior of theta. Use these to plug in
# to the distribution of the data (in this casepossion) and make new replica draws
data_density = density(bids)
plot(data_density)
bids
#for (i in 1:n){
x_draws = rpois(1000, theta_draw[1])
plot(density(x_draws))
x_draws= c()
x_draws= rep(0,n)
for (i in 1:n){
x_draws = x_draws + rpois(1000, theta_draw[1])
}
x_draws= rep(0,n)
for (i in 1:n){
x_draws = x_draws + rpois(1000, theta_draw[i])
}
x_draws_mean = density(x_draws)
plot(x_draws_mean)
x_draws_mean = density(x_draws/n)
plot(x_draws_mean)
x_draws= rep(0,n)
for (i in 1:n){
x_draws = x_draws + rpois(1000, theta_draw[i])
}
xx_draws
x_draws
plot(density(x_draws))
plot(xGrid, data_dens, type = 'l', yylim = )
plot(xGrid, data_dens, type = 'l' )
lines(density_mean)
